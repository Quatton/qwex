# Lima VM configuration for k3s server node
# Based on the official lima k3s template for cross-machine access

minimumLimaVersion: 1.1.0

base: template://_images/ubuntu-lts

# Mounts are disabled in this template, but can be enabled optionally.
mounts: []
# containerd is managed by k3s, not by Lima, so the values are set to false here.
containerd:
  system: false
  user: false

# Port forwarding for k3s API server
portForwards:
  - guestPort: 6443
    hostPort: 6443
    # k3s API server - accessible from other machines

env:
  K3S_VPN_AUTH_KEY: ${K3S_VPN_AUTH_KEY}
  K3S_TOKEN: ${K3S_TOKEN}

provision:
  - mode: system
    script: |
      #!/bin/bash
      set -euo pipefail


      if [ -z "${K3S_VPN_AUTH_KEY:-}" ]; then
        echo "K3S_VPN_AUTH_KEY environment variable must be set before starting the Lima instance." >&2
        exit 1
      fi

      export DEBIAN_FRONTEND=noninteractive
      apt-get update -qq
      apt-get install -y -qq curl jq

      if ! command -v tailscale >/dev/null 2>&1; then
        curl -fsSL https://tailscale.com/install.sh | sh
      fi

      sudo tailscale up \
        --auth-key="${K3S_VPN_AUTH_KEY}" \
        --hostname="$(hostname)" \
        --ssh \
        --accept-routes

      # Wait for Tailscale to connect and get an IP address
      echo "Waiting for Tailscale to connect..."
      for i in {1..30}; do
        TS_IP=$(tailscale ip -4 | head -n 1)
        if [ -n "${TS_IP}" ]; then
          echo "Tailscale connected with IP: ${TS_IP}"
          break
        fi
        echo "Attempt $i/30: Waiting for Tailscale connection..."
        sleep 2
      done

      if [ -z "${TS_IP}" ]; then
        echo "Failed to determine Tailscale IPv4 address after 60 seconds" >&2
        echo "Tailscale status:"
        sudo tailscale status || true
        exit 1
      fi

      VPN_AUTH_ARG="--vpn-auth=name=tailscale,joinKey=${K3S_VPN_AUTH_KEY}"
      INSTALL_ARGS="server \
        --write-kubeconfig-mode=644 \
        --disable=traefik,servicelb,metrics-server \
        ${VPN_AUTH_ARG} \
        --advertise-address=${TS_IP} \
        --node-ip=${TS_IP} \
        --node-external-ip=${TS_IP} \
        --bind-address=${TS_IP} \
        --tls-san=${TS_IP}"

      if [ -n "${K3S_TOKEN:-}" ]; then
        INSTALL_ARGS="${INSTALL_ARGS} --token=${K3S_TOKEN}"
      fi

      if [ ! -d /var/lib/rancher/k3s ]; then
        INSTALL_K3S_EXEC="${INSTALL_ARGS}" \
          curl -sfL https://get.k3s.io | sh -
      else
        systemctl restart k3s
      fi

      sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target

probes:
  - script: |
      #!/bin/bash
      set -eux -o pipefail
      if ! timeout 30s bash -c "until test -f /etc/rancher/k3s/k3s.yaml; do sleep 3; done"; then
              echo >&2 "k3s is not running yet"
              exit 1
      fi
    hint: |
      The k3s kubeconfig file has not yet been created.
      Run "limactl shell roam-server sudo journalctl -u k3s" to check the log.
      If that is still empty, check the bottom of the log at "/var/log/cloud-init-output.log".

copyToHost:
  - guest: "/etc/rancher/k3s/k3s.yaml"
    host: "{{.Dir}}/copied-from-guest/kubeconfig.yaml"
    deleteOnStop: true

message: |
  To run `kubectl` on the host (assumes kubectl is installed), run the following commands:
  ------
  export KUBECONFIG="{{.Dir}}/copied-from-guest/kubeconfig.yaml"
  kubectl ...
  ------
  The API server is forwarded to port 6443 on the host. Share that port (for example via your
  host machine's IP) for cross-machine access.

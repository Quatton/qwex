# Lima VM configuration for k3s agent/worker node
# This can be used to add worker nodes to the cluster

minimumLimaVersion: 1.1.0

base: template://_images/ubuntu-lts

# Mounts are disabled in this template, but can be enabled optionally.
mounts: []
# containerd is managed by k3s, not by Lima, so the values are set to false here.
containerd:
  system: false
  user: false

# Provision script to install k3s agent
# Note: This requires the server to be running and the token to be available
provision:
  - mode: system
    env:
      K3S_VPN_AUTH_KEY: '{{ env "K3S_VPN_AUTH_KEY" }}'
      K3S_SERVER_TAILSCALE_IP: '{{ env "K3S_SERVER_TAILSCALE_IP" }}'
      K3S_TOKEN: '{{ env "K3S_TOKEN" }}'
    script: |
      #!/bin/bash
      set -euo pipefail

      if [ -z "${K3S_VPN_AUTH_KEY:-}" ]; then
        echo "K3S_VPN_AUTH_KEY environment variable must be set before starting the Lima instance." >&2
        exit 1
      fi

      if [ -z "${K3S_SERVER_TAILSCALE_IP:-}" ]; then
        echo "K3S_SERVER_TAILSCALE_IP environment variable must be set before starting the Lima instance." >&2
        exit 1
      fi

      if [ -z "${K3S_TOKEN:-}" ]; then
        echo "K3S_TOKEN environment variable must be set before starting the Lima instance." >&2
        exit 1
      fi

      export DEBIAN_FRONTEND=noninteractive
      apt-get update -qq
      apt-get install -y -qq curl jq

      if ! command -v tailscale >/dev/null 2>&1; then
        curl -fsSL https://tailscale.com/install.sh | sh
      fi

      systemctl enable --now tailscaled

      if ! tailscale status --json | jq -e '.Self.Online' >/dev/null 2>&1; then
        tailscale up \
          --auth-key="${K3S_VPN_AUTH_KEY}" \
          --hostname="$(hostname)" \
          --accept-routes
      fi

      TS_IP=$(tailscale ip -4 | head -n 1)
      if [ -z "${TS_IP}" ]; then
        echo "Failed to determine Tailscale IPv4 address" >&2
        exit 1
      fi

      VPN_AUTH_ARG="--vpn-auth=name=tailscale,joinKey=${K3S_VPN_AUTH_KEY}"

      INSTALL_K3S_EXEC="agent \
        ${VPN_AUTH_ARG} \
        --server=https://${K3S_SERVER_TAILSCALE_IP}:6443 \
        --token=${K3S_TOKEN} \
        --node-ip=${TS_IP} \
        --node-external-ip=${TS_IP}" \
        curl -sfL https://get.k3s.io | sh -

probes:
  - description: "system to be ready"
    script: |
      #!/bin/bash
      which curl && which wget
